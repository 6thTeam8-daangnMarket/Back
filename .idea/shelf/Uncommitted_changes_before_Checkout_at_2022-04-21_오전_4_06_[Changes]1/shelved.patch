Index: clone_backend/src/main/java/com/sparta/clone_backend/service/PostLikeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sparta.clone_backend.service;\r\n\r\nimport com.sparta.clone_backend.dto.ResponseDto;\r\nimport com.sparta.clone_backend.model.Post;\r\nimport com.sparta.clone_backend.model.PostLike;\r\nimport com.sparta.clone_backend.repository.PostLikeRepository;\r\nimport com.sparta.clone_backend.repository.PostRepository;\r\nimport com.sparta.clone_backend.repository.UserRepository;\r\nimport com.sparta.clone_backend.security.UserDetailsImpl;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport javax.transaction.Transactional;\r\nimport java.util.Optional;\r\n\r\n@RequiredArgsConstructor\r\n@Service\r\npublic class PostLikeService {\r\n    private final PostRepository postRepository;\r\n    private final PostLikeRepository postLikeRepository;\r\n\r\n    @Transactional\r\n    public ResponseDto likePost(Long postId, UserDetailsImpl userDetails) {\r\n        Post post = postRepository.findById(postId).orElseThrow(\r\n                () -> new IllegalArgumentException(\"판매되지 않는 상품입니다.\")\r\n        );\r\n        Optional<PostLike> postLike = postLikeRepository.findByUserNameAndPost(userDetails.getUsername(), post);\r\n\r\n        if (!postLike.isPresent()) {\r\n            PostLike postLikesave = new PostLike(userDetails.getUsername(), post);\r\n            postLikeRepository.save(postLikesave);\r\n            return new ResponseDto(true);\r\n        }\r\n        else {\r\n            postLikeRepository.deleteById(postLike.get().getId());\r\n            return new ResponseDto(false);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clone_backend/src/main/java/com/sparta/clone_backend/service/PostLikeService.java b/clone_backend/src/main/java/com/sparta/clone_backend/service/PostLikeService.java
--- a/clone_backend/src/main/java/com/sparta/clone_backend/service/PostLikeService.java	(revision 9eae8850fdc07f74ba7aec41af2d00599a377302)
+++ b/clone_backend/src/main/java/com/sparta/clone_backend/service/PostLikeService.java	(date 1650481591128)
@@ -5,7 +5,6 @@
 import com.sparta.clone_backend.model.PostLike;
 import com.sparta.clone_backend.repository.PostLikeRepository;
 import com.sparta.clone_backend.repository.PostRepository;
-import com.sparta.clone_backend.repository.UserRepository;
 import com.sparta.clone_backend.security.UserDetailsImpl;
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
Index: clone_backend/src/main/java/com/sparta/clone_backend/security/WebSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.sparta.clone_backend.security;\r\n\r\nimport com.sparta.clone_backend.security.filter.FormLoginFilter;\r\nimport com.sparta.clone_backend.security.filter.JwtAuthFilter;\r\nimport com.sparta.clone_backend.security.jwt.HeaderTokenExtractor;\r\nimport com.sparta.clone_backend.security.provider.FormLoginAuthProvider;\r\nimport com.sparta.clone_backend.security.provider.JWTAuthProvider;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity // 스프링 Security 지원을 가능하게 함\r\n@EnableGlobalMethodSecurity(securedEnabled = true) // @Secured 어노테이션 활성화\r\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    private final JWTAuthProvider jwtAuthProvider;\r\n    private final HeaderTokenExtractor headerTokenExtractor;\r\n\r\n\r\n    public WebSecurityConfig(\r\n            JWTAuthProvider jwtAuthProvider,\r\n            HeaderTokenExtractor headerTokenExtractor\r\n\r\n\r\n    ) {\r\n        this.jwtAuthProvider = jwtAuthProvider;\r\n        this.headerTokenExtractor = headerTokenExtractor;\r\n    }\r\n\r\n    @Bean\r\n    public BCryptPasswordEncoder encodePassword() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Override\r\n    public void configure(AuthenticationManagerBuilder auth) {\r\n        auth\r\n                .authenticationProvider(formLoginAuthProvider())\r\n                .authenticationProvider(jwtAuthProvider);\r\n    }\r\n\r\n    @Override\r\n    public void configure(WebSecurity web) {\r\n        // h2-console 사용에 대한 허용 (CSRF, FrameOptions 무시)\r\n        web\r\n                .ignoring()\r\n                .antMatchers(\"/h2-console/**\");\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.csrf().disable();\r\n\r\n        //cors 해결\r\n        http.cors()\r\n                        .configurationSource(corsConfigurationSource());\r\n\r\n        // 서버에서 인증은 JWT로 인증하기 때문에 Session의 생성을 막습니다.\r\n        http\r\n                .sessionManagement()\r\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);\r\n\r\n        /*\r\n         * 1.\r\n         * UsernamePasswordAuthenticationFilter 이전`에 FormLoginFilter, JwtFilter 를 등록합니다.\r\n         * FormLoginFilter : 로그인 인증을 실시합니다.\r\n         * JwtFilter       : 서버에 접근시 JWT 확인 후 인증을 실시합니다.\r\n         */\r\n        http\r\n\r\n                .addFilterBefore(formLoginFilter(), UsernamePasswordAuthenticationFilter.class)\r\n                .addFilterBefore(jwtFilter(), UsernamePasswordAuthenticationFilter.class);\r\n\r\n        http.authorizeRequests()\r\n                .anyRequest()\r\n                .permitAll()\r\n                .and()\r\n\r\n                // [로그아웃 기능]\r\n                .logout()\r\n                // 로그아웃 요청 처리 URL\r\n                .logoutUrl(\"/user/logout\")\r\n                .permitAll()\r\n                .and()\r\n                .exceptionHandling()\r\n                // \"접근 불가\" 페이지 URL 설정\r\n                .accessDeniedPage(\"/forbidden.html\");\r\n    }\r\n\r\n    @Bean\r\n    public FormLoginFilter formLoginFilter() throws Exception {\r\n        FormLoginFilter formLoginFilter = new FormLoginFilter(authenticationManager());\r\n        formLoginFilter.setFilterProcessesUrl(\"/user/logIn\");\r\n        formLoginFilter.setAuthenticationSuccessHandler(formLoginSuccessHandler());\r\n        formLoginFilter.afterPropertiesSet();\r\n        return formLoginFilter;\r\n    }\r\n\r\n    @Bean\r\n    public FormLoginSuccessHandler formLoginSuccessHandler() {\r\n        return new FormLoginSuccessHandler();\r\n    }\r\n\r\n    @Bean\r\n    public FormLoginAuthProvider formLoginAuthProvider() {\r\n        return new FormLoginAuthProvider(encodePassword());\r\n    }\r\n\r\n    private JwtAuthFilter jwtFilter() throws Exception {\r\n        List<String> skipPathList = new ArrayList<>();\r\n        // Static 정보 접근 허용\r\n        skipPathList.add(\"GET,/images/**\");\r\n        skipPathList.add(\"GET,/css/**\");\r\n        skipPathList.add(\"POST,/auth/**\");\r\n        skipPathList.add(\"GET,/auth/**\");\r\n\r\n        // h2-console 허용\r\n        skipPathList.add(\"GET,/h2-console/**\");\r\n        skipPathList.add(\"POST,/h2-console/**\");\r\n        // 회원 관리 API 허용'\r\n        skipPathList.add(\"POST,/user/kakao/**\");\r\n        skipPathList.add(\"POST,/user/signUp\");\r\n        skipPathList.add(\"POST,/user/idCheck\");\r\n        skipPathList.add(\"POST,/user/nickNameCheck\");\r\n        skipPathList.add(\"POST,/user/logIn\");\r\n//        skipPathList.add(\"POST,/user/**\");\r\n\r\n        //게시글 관련 허용\r\n        skipPathList.add(\"GET,/api/posts\");\r\n        skipPathList.add(\"GET,/api/posted/**\");\r\n        skipPathList.add(\"GET,/api/posts/**\");\r\n//        skipPathList.add(\"POST,/api/write/**\");\r\n//        skipPathList.add(\"DELETE,/api/posts/**\");\r\n\r\n        skipPathList.add(\"GET,/\");\r\n        skipPathList.add(\"GET,/basic.js\");\r\n\r\n        skipPathList.add(\"GET,/favicon.ico\");\r\n\r\n        FilterSkipMatcher matcher = new FilterSkipMatcher(\r\n                skipPathList,\r\n                \"/**\"\r\n        );\r\n\r\n        JwtAuthFilter filter = new JwtAuthFilter(\r\n                matcher,\r\n                headerTokenExtractor\r\n        );\r\n        filter.setAuthenticationManager(super.authenticationManagerBean());\r\n\r\n        return filter;\r\n    }\r\n\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    //cors 해결\r\n    public CorsConfigurationSource corsConfigurationSource(){\r\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\r\n        corsConfiguration.addAllowedOrigin(\"http://localhost:3000\"); // local 테스트 시\r\n        //corsConfiguration.addAllowedOrigin(\"\"); //배포시\r\n        corsConfiguration.addAllowedMethod(\"*\");\r\n        corsConfiguration.addAllowedHeader(\"*\");\r\n        corsConfiguration.addExposedHeader(\"Authorization\");\r\n        corsConfiguration.setAllowCredentials(true);\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\r\n        return source;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clone_backend/src/main/java/com/sparta/clone_backend/security/WebSecurityConfig.java b/clone_backend/src/main/java/com/sparta/clone_backend/security/WebSecurityConfig.java
--- a/clone_backend/src/main/java/com/sparta/clone_backend/security/WebSecurityConfig.java	(revision 9eae8850fdc07f74ba7aec41af2d00599a377302)
+++ b/clone_backend/src/main/java/com/sparta/clone_backend/security/WebSecurityConfig.java	(date 1650481591136)
@@ -37,7 +37,6 @@
             JWTAuthProvider jwtAuthProvider,
             HeaderTokenExtractor headerTokenExtractor
 
-
     ) {
         this.jwtAuthProvider = jwtAuthProvider;
         this.headerTokenExtractor = headerTokenExtractor;
